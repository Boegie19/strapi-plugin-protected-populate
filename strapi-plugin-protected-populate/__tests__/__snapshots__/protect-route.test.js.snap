// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Protect filters Normal filters check if i can filter on a allowed field 1`] = `
{
  "fields": [
    "id",
    "b",
  ],
  "filters": {
    "b": {
      "$eq": "a",
    },
  },
  "populate": {},
}
`;

exports[`Protect filters Normal filters ensure that I can't filter on none allowed fields 1`] = `
{
  "fields": [
    "id",
    "b",
  ],
  "filters": {},
  "populate": {},
}
`;

exports[`Protect filters joins Filters should ignore $and 1`] = `
{
  "fields": [
    "id",
    "a",
    "b",
  ],
  "filters": {
    "$and": [
      {
        "a": {
          "$eq": "a",
        },
      },
      {
        "b": {
          "$eq": "b",
        },
      },
      {},
    ],
  },
  "populate": {},
}
`;

exports[`Protect filters joins Filters should ignore $not and and ignore none existing fields 1`] = `
{
  "fields": [
    "id",
    "a",
    "b",
  ],
  "filters": {},
  "populate": {},
}
`;

exports[`Protect filters joins Filters should ignore $not and work 1`] = `
{
  "fields": [
    "id",
    "a",
    "b",
  ],
  "filters": {},
  "populate": {},
}
`;

exports[`Protect filters joins Filters should ignore $or 1`] = `
{
  "fields": [
    "id",
    "a",
    "b",
  ],
  "filters": {
    "$or": [
      {
        "a": {
          "$eq": "a",
        },
      },
      {
        "b": {
          "$eq": "b",
        },
      },
      {},
    ],
  },
  "populate": {},
}
`;

exports[`Protect populate DZ array populate should populate DZ with populate array 1`] = `
{
  "fields": undefined,
  "filters": undefined,
  "populate": {
    "a.a": {
      "fields": [
        "id",
        "c",
        "d",
      ],
      "populate": {
        "c": {
          "fields": [
            "id",
            "a",
            "b",
          ],
          "populate": {},
        },
        "d": {
          "fields": [
            "id",
            "a",
            "b",
          ],
          "populate": {},
        },
      },
    },
    "a.b": {
      "fields": [
        "id",
        "c",
        "d",
      ],
      "populate": {
        "c": {
          "fields": [
            "id",
            "a",
            "b",
          ],
          "populate": {},
        },
      },
    },
    "a.c": {
      "fields": [
        "id",
        "e",
        "f",
      ],
      "populate": {},
    },
  },
}
`;

exports[`Protect populate DZ object = true should populate DZ if DZ value is true 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "dz": {
      "on": {
        "a.a": {
          "fields": [
            "id",
            "c",
            "d",
          ],
        },
        "a.b": {
          "fields": [
            "id",
            "c",
            "d",
          ],
        },
        "a.c": {
          "fields": [
            "id",
            "e",
            "f",
          ],
        },
      },
    },
  },
}
`;

exports[`Protect populate DZ on should populate DZ name only if on is empty 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "dz": {
      "on": {},
    },
  },
}
`;

exports[`Protect populate DZ on should populate DZ only selected fields/populates 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "dz": {
      "on": {
        "a.a": {
          "fields": [
            "id",
            "c",
          ],
          "populate": {
            "c": {
              "fields": [
                "id",
                "a",
              ],
              "populate": {},
            },
          },
        },
      },
    },
  },
}
`;

exports[`Protect populate DZ populate * should populate DZ * 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "abc": {
      "fields": [
        "id",
        "a",
        "b",
      ],
    },
    "dz": {
      "on": {
        "a.a": {
          "fields": [
            "id",
            "c",
            "d",
          ],
        },
        "a.b": {
          "fields": [
            "id",
            "c",
            "d",
          ],
        },
        "a.c": {
          "fields": [
            "id",
            "e",
            "f",
          ],
        },
      },
    },
  },
}
`;

exports[`Protect populate DZ populate fields populate DZ fields 1`] = `
{
  "fields": undefined,
  "filters": undefined,
  "populate": {
    "a.a": {
      "fields": [
        "id",
        "c",
      ],
    },
    "a.b": {
      "fields": [
        "id",
        "c",
      ],
    },
    "a.c": {
      "fields": [
        "id",
        "f",
      ],
    },
  },
}
`;

exports[`Protect populate DZ populate should populate DZ and split populate between all components 1`] = `
{
  "fields": undefined,
  "filters": undefined,
  "populate": {
    "a.a": {
      "fields": [
        "id",
        "c",
        "d",
      ],
      "populate": {
        "c": {
          "fields": [
            "id",
            "a",
            "b",
          ],
          "populate": {},
        },
        "d": {
          "fields": [
            "id",
            "a",
            "b",
          ],
          "populate": {},
        },
      },
    },
    "a.b": {
      "fields": [
        "id",
        "c",
        "d",
      ],
      "populate": {
        "c": {
          "fields": [
            "id",
            "a",
            "b",
          ],
          "populate": {},
        },
      },
    },
    "a.c": {
      "fields": [
        "id",
        "e",
        "f",
      ],
      "populate": {},
    },
  },
}
`;

exports[`Protect populate Normal * populate populate * should only show first level down 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "a": {
      "fields": [
        "id",
        "a",
        "z",
      ],
    },
  },
}
`;

exports[`Protect populate Normal array populate populate should only populate should handle 3 populates 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "a": {
      "fields": [
        "id",
      ],
      "populate": {
        "b": {
          "fields": [
            "id",
          ],
          "populate": {
            "c": {
              "fields": [
                "id",
                "a",
                "b",
              ],
              "populate": {},
            },
          },
        },
      },
    },
  },
}
`;

exports[`Protect populate Normal array populate populate should still protect in array 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "a": {
      "fields": [
        "id",
      ],
      "populate": {
        "b": {
          "fields": [
            "id",
          ],
          "populate": {},
        },
      },
    },
  },
}
`;

exports[`Protect populate Normal fields should only populate what is allowed 1`] = `
{
  "fields": [
    "id",
    "b",
  ],
  "filters": undefined,
  "populate": {},
}
`;

exports[`Protect populate Normal fields should return correctly if nested in populate 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "abc": {
      "fields": [
        "id",
        "b",
      ],
      "populate": {},
    },
  },
}
`;

exports[`Protect populate Normal fields should return full info when unexpected fields input 1`] = `
{
  "fields": [
    "id",
    "b",
  ],
  "filters": undefined,
  "populate": {},
}
`;

exports[`Protect populate Normal fields should return no fields noting 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {},
}
`;

exports[`Protect populate Normal fields should return only the fields in info when fields does not exist 1`] = `
{
  "fields": [
    "id",
    "b",
  ],
  "filters": undefined,
  "populate": {},
}
`;

exports[`Protect populate Normal object = true populate populate a: true should populate 1 level of a only 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "a": true,
  },
}
`;

exports[`Protect populate Normal populate populate should not populate anyting if info has no populate 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {},
}
`;

exports[`Protect populate Normal populate populate should not populate anyting if quary has no populate 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": undefined,
}
`;

exports[`Protect populate Normal populate populate should only populate if in info 1`] = `
{
  "fields": [
    "id",
  ],
  "filters": undefined,
  "populate": {
    "b": {
      "fields": [
        "id",
      ],
      "populate": {},
    },
  },
}
`;
